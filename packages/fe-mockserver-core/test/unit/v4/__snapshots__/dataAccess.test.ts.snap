// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Data Access $expand depending on target key property name 1:* - key property names are different 1`] = `
{
  "ID": "",
  "_differentIdMany": [],
}
`;

exports[`Data Access $expand depending on target key property name 1:* - key property names are equal 1`] = `
{
  "ID": "",
  "_sameIdMany": [],
}
`;

exports[`Data Access $expand depending on target key property name 1:1 - key property names are different 1`] = `
{
  "ID": "",
  "_differentId": {
    "ID_B": "",
  },
}
`;

exports[`Data Access $expand depending on target key property name 1:1 - key property names are equal 1`] = `
{
  "ID": "",
  "_sameId": {
    "ID": "",
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A 1`] = `
[
  {
    "ID": "A1",
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "Hey",
        "C": 0,
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 1,
      "value2": 2,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
  {
    "ID": "A2",
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "",
        "C": "",
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 2,
      "value2": 1,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A with order by on the complex type 1`] = `
[
  {
    "ID": "A2",
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "",
        "C": "",
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 2,
      "value2": 1,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
  {
    "ID": "A1",
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "Hey",
        "C": 0,
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 1,
      "value2": 2,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A('A1') 1`] = `
{
  "ID": "A1",
  "complex": {
    "subcomplex": {
      "A": "",
      "B": "Hey",
      "C": 0,
    },
    "subcomplexNotNull": {
      "A": "",
      "B": "",
      "C": "",
    },
    "value1": 1,
    "value2": 2,
    "value3": 0,
  },
  "complexNotNull": {
    "subcomplex": "",
    "subcomplexNotNull": "",
    "value1": "",
    "value2": "",
    "value3": "",
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')/b 1`] = `
[
  {
    "UID": "B1",
    "a_ID": "A1",
    "complex": {
      "value1": true,
      "value2": false,
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')/b('B1')?$select=complex 1`] = `
{
  "UID": "B1",
  "complex": {
    "value1": true,
    "value2": false,
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')/b('B1')?$select=complex/value1 1`] = `
{
  "UID": "B1",
  "complex": {
    "value1": true,
    "value2": false,
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')/b?$select=complex 1`] = `
[
  {
    "UID": "B1",
    "complex": {
      "value1": true,
      "value2": false,
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')/b?$select=complex/value1 1`] = `
[
  {
    "UID": "B1",
    "complex": {
      "value1": true,
      "value2": false,
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')?$expand=b 1`] = `
{
  "ID": "A1",
  "b": [
    {
      "UID": "B1",
      "a_ID": "A1",
      "complex": {
        "value1": true,
        "value2": false,
      },
    },
  ],
  "complex": {
    "subcomplex": {
      "A": "",
      "B": "Hey",
      "C": 0,
    },
    "subcomplexNotNull": {
      "A": "",
      "B": "",
      "C": "",
    },
    "value1": 1,
    "value2": 2,
    "value3": 0,
  },
  "complexNotNull": {
    "subcomplex": "",
    "subcomplexNotNull": "",
    "value1": "",
    "value2": "",
    "value3": "",
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')?$expand=b($select=complex) 1`] = `
{
  "ID": "A1",
  "b": [
    {
      "UID": "B1",
      "complex": {
        "value1": true,
        "value2": false,
      },
    },
  ],
  "complex": {
    "subcomplex": {
      "A": "",
      "B": "Hey",
      "C": 0,
    },
    "subcomplexNotNull": {
      "A": "",
      "B": "",
      "C": "",
    },
    "value1": 1,
    "value2": 2,
    "value3": 0,
  },
  "complexNotNull": {
    "subcomplex": "",
    "subcomplexNotNull": "",
    "value1": "",
    "value2": "",
    "value3": "",
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')?$expand=b($select=complex/value1) 1`] = `
{
  "ID": "A1",
  "b": [
    {
      "UID": "B1",
      "complex": {
        "value1": true,
        "value2": false,
      },
    },
  ],
  "complex": {
    "subcomplex": {
      "A": "",
      "B": "Hey",
      "C": 0,
    },
    "subcomplexNotNull": {
      "A": "",
      "B": "",
      "C": "",
    },
    "value1": 1,
    "value2": 2,
    "value3": 0,
  },
  "complexNotNull": {
    "subcomplex": "",
    "subcomplexNotNull": "",
    "value1": "",
    "value2": "",
    "value3": "",
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')?$select=complex 1`] = `
{
  "ID": "A1",
  "complex": {
    "subcomplex": {
      "A": "",
      "B": "Hey",
      "C": 0,
    },
    "subcomplexNotNull": {
      "A": "",
      "B": "",
      "C": "",
    },
    "value1": 1,
    "value2": 2,
    "value3": 0,
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A('A1')?$select=complex/value1 1`] = `
{
  "ID": "A1",
  "complex": {
    "subcomplex": {
      "A": "",
      "B": "Hey",
      "C": 0,
    },
    "subcomplexNotNull": {
      "A": "",
      "B": "",
      "C": "",
    },
    "value1": 1,
    "value2": 2,
    "value3": 0,
  },
}
`;

exports[`Data Access $select handling with structured complex types can read /A?$expand=b 1`] = `
[
  {
    "ID": "A1",
    "b": [
      {
        "UID": "B1",
        "a_ID": "A1",
        "complex": {
          "value1": true,
          "value2": false,
        },
      },
    ],
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "Hey",
        "C": 0,
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 1,
      "value2": 2,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
  {
    "ID": "A2",
    "b": [
      {
        "UID": "B1",
        "a_ID": "A1",
        "complex": {
          "value1": true,
          "value2": false,
        },
      },
    ],
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "",
        "C": "",
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 2,
      "value2": 1,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A?$expand=b($select=complex) 1`] = `
[
  {
    "ID": "A1",
    "b": [
      {
        "UID": "B1",
        "complex": {
          "value1": true,
          "value2": false,
        },
      },
    ],
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "Hey",
        "C": 0,
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 1,
      "value2": 2,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
  {
    "ID": "A2",
    "b": [
      {
        "UID": "B1",
        "complex": {
          "value1": true,
          "value2": false,
        },
      },
    ],
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "",
        "C": "",
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 2,
      "value2": 1,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A?$expand=b($select=complex/value1) 1`] = `
[
  {
    "ID": "A1",
    "b": [
      {
        "UID": "B1",
        "complex": {
          "value1": true,
          "value2": false,
        },
      },
    ],
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "Hey",
        "C": 0,
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 1,
      "value2": 2,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
  {
    "ID": "A2",
    "b": [
      {
        "UID": "B1",
        "complex": {
          "value1": true,
          "value2": false,
        },
      },
    ],
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "",
        "C": "",
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 2,
      "value2": 1,
      "value3": 0,
    },
    "complexNotNull": {
      "subcomplex": "",
      "subcomplexNotNull": "",
      "value1": "",
      "value2": "",
      "value3": "",
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A?$select=complex 1`] = `
[
  {
    "ID": "A1",
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "Hey",
        "C": 0,
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 1,
      "value2": 2,
      "value3": 0,
    },
  },
  {
    "ID": "A2",
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "",
        "C": "",
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 2,
      "value2": 1,
      "value3": 0,
    },
  },
]
`;

exports[`Data Access $select handling with structured complex types can read /A?$select=complex/value1 1`] = `
[
  {
    "ID": "A1",
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "Hey",
        "C": 0,
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 1,
      "value2": 2,
      "value3": 0,
    },
  },
  {
    "ID": "A2",
    "complex": {
      "subcomplex": {
        "A": "",
        "B": "",
        "C": "",
      },
      "subcomplexNotNull": {
        "A": "",
        "B": "",
        "C": "",
      },
      "value1": 2,
      "value2": 1,
      "value3": 0,
    },
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=collectionProperty1/all(d:d gt 0) 1`] = `
[
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=collectionProperty1/any(d:d gt 0) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=collectionProperty2/all(d:d/value gt 0) 1`] = `
[
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=collectionProperty2/all(d:d/value gt 0) and navigationProperty1/all(f:f/value eq 1) 1`] = `
[
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=collectionProperty2/any(d:d/value gt 0) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/all(d:d/collectionProperty1/all(e:e gt 0)) 1`] = `
[
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/all(d:d/collectionProperty1/any(e:e gt 0)) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/all(d:d/collectionProperty2/all(e:e/value gt 0)) 1`] = `
[
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/all(d:d/collectionProperty2/any(e:e/value gt 0)) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/all(d:d/navigationProperty1/all(e:e/value gt 0)) 1`] = `
[
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/all(d:d/navigationProperty1/any(e:e/value gt 0)) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/all(d:d/value gt 0) 1`] = `
[
  {
    "ID": "B",
  },
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/collectionProperty1/all(e:e gt 1)) 1`] = `
[
  {
    "ID": "B",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/collectionProperty1/any(e:e gt 0)) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/collectionProperty2/all(e:e/value gt 1)) 1`] = `
[
  {
    "ID": "B",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/collectionProperty2/any(e:e/value gt 0)) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/navigationProperty1/all(e:e/value gt 1)) 1`] = `
[
  {
    "ID": "B",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/navigationProperty1/any(e:e/value gt 0)) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/parent/navigationProperty2/value gt 0) 1`] = `
[
  {
    "ID": "B",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/value gt 0 and d/navigationProperty2/value eq 1) 1`] = `
[
  {
    "ID": "A",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/value gt 0) 1`] = `
[
  {
    "ID": "A",
  },
  {
    "ID": "B",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty1/any(d:d/value gt 0)&$expand=navigationProperty1($select=ID),navigationProperty2 1`] = `
[
  {
    "ID": "A",
    "navigationProperty1": [
      {
        "ID": "AA",
      },
      {
        "ID": "AB",
      },
    ],
    "navigationProperty2": {
      "ID": "AA",
      "collectionProperty1": [
        0,
        1,
      ],
      "collectionProperty2": [
        {
          "value": 0,
        },
        {
          "value": 1,
        },
      ],
      "navigationProperty2_ID": "AA-A",
      "parent_ID": "A",
      "value": 0,
    },
  },
  {
    "ID": "B",
    "navigationProperty1": [
      {
        "ID": "BA",
      },
    ],
    "navigationProperty2": {
      "ID": "AB",
      "collectionProperty1": [
        1,
        1,
      ],
      "collectionProperty2": [
        {
          "value": 1,
        },
        {
          "value": 1,
        },
      ],
      "navigationProperty2_ID": "AB-A",
      "parent_ID": "A",
      "value": 1,
    },
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty2/parent/navigationProperty1/all(d:d/value gt 0) 1`] = `
[
  {
    "ID": "C",
  },
]
`;

exports[`Data Access additional $filter tests GET /Entities?$filter=navigationProperty2/value eq 0 1`] = `
[
  {
    "ID": "A",
  },
]
`;

exports[`Data Access v4metadata - GET with $filter involving a navigation property that is null for some elements 1`] = `
[
  {
    "ID": 0,
    "part2": {
      "ID": 0,
      "number": 1,
    },
    "part2_ID": 0,
  },
]
`;
